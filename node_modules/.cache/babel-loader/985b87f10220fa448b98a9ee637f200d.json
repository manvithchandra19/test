{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manvi\\\\Documents\\\\Project\\\\jsonmodel\\\\src\\\\schema.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./schema.css\"; //\n\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Schema = () => {\n  _s();\n\n  const [schemaType, setSchemaType] = useState(\"class\");\n  const [schemaName, setSchemaName] = useState(\"\");\n  const [titlemain, setTitle] = useState(\"\");\n  const [titleXdm, setTitleXdm] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [descriptionXdm, setDescriptionXdm] = useState(\"\");\n  const [behaviour, setBehaviour] = useState(\"record\");\n  const [className, setClassName] = useState(\"profile\");\n  const [typemain, setType] = useState(\"string\");\n  const [metaStatus, setmetastatus] = useState(\"experimental\");\n  const [jsonOutput, setjsonOutput] = useState(\"\");\n  const [inputList, setInputList] = useState([{\n    titleID: \"\",\n    titleXDM: \"\",\n    typeXDM: \"\",\n    descriptionXDM: \"\"\n  }]);\n  const schema_Type = [\"class\", \"mixin\", \"datatype\"];\n  const behaviours = [\"record\", \"timeseries\"];\n  const classname = [\"profile\", \"experience event\", \"product\"];\n  const types = [\"string\", \"integer\", \"data-time\", \"date\", \"array\", \"object\"];\n  const metastatus = [\"experimental\", \"stable\"];\n  const [labeloption, setlabel] = useState(\"Behaviour\");\n  const [valueoption, setvalue] = useState(behaviours);\n\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value\n    } = e.target; // console.log(e.target.name);\n\n    const list = [...inputList]; // console.log(list);\n\n    list[index][name] = value;\n    setInputList(list);\n    console.log(inputList);\n  }; //\n  // constructor(props) {\n  //   super(props);\n  //   this.toggle = this.toggle.bind(this);\n  //   this.state = {\n  //     isOpen: false\n  //   }\n  // };\n  //\n  // toggle() {\n  //   this.setState({\n  //     isOpen: !this.state.isOpen\n  //   });\n  // }\n  //\n\n\n  const handleAddClick = () => {\n    setInputList([...inputList, {\n      titleID: \"\",\n      titleXDM: \"\",\n      typeXDM: \"\",\n      descriptionXDM: \"\"\n    }]);\n    console.log(inputList);\n  };\n\n  const submitApi = () => {\n    var details = {\n      metaStatus: metaStatus,\n      descriptionXdm: descriptionXdm,\n      type: typemain,\n      description: description,\n      title: titlemain,\n      titleXdm: titleXdm,\n      // type:typeXdm,\n      behaviour: behaviour,\n      className: className,\n      schemaName: schemaName,\n      schemaType: schemaType\n    };\n    var formBody = [];\n\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n\n    formBody = formBody.join(\"&\");\n    const pdfData = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n      },\n      body: formBody\n    };\n    fetch(\"http://localhost:5000/getData\", pdfData).then(response => response.json()).then(response => {\n      setjsonOutput(JSON.stringify(response, undefined, 4));\n      console.log(response);\n      clearText();\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const clearText = () => {\n    setSchemaName(\"\");\n    setSchemaType(\"\");\n    setDescriptionXdm(\"\");\n    setDescription(\"\");\n    setTitleXdm(\"\");\n    setSchemaType(\"class\");\n    setmetastatus(\"\");\n    setType(\"\");\n    setTitle(\"\");\n  }; //let labeloption = 'Behaviour', valueoption = behaviours;\n\n\n  const handleOption = e => {\n    setSchemaType(e.target.value);\n\n    if (e.target.value === \"class\") {\n      setlabel(\"Behaviour\");\n      setvalue(behaviours);\n    } else if (e.target.value === \"mixin\") {\n      setlabel(\"Class Name\");\n      setvalue(classname);\n    }\n  };\n\n  const handleclass = e => {\n    if (schemaType === \"class\") {\n      setBehaviour(e.target.value);\n    } else if (schemaType === \"mixin\") {\n      setClassName(e.target.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"XDM Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"split left\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"centered \",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form\",\n          children: \"Schema Type \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleOption,\n          children: schema_Type.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item,\n            children: item\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: labeloption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleclass,\n          children: valueoption.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item,\n            children: item\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Schema Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: schemaName,\n          onChange: e => setSchemaName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Schema Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: titlemain,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Schema Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: description,\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 18\n        }, this), inputList.map((x, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" XDM TitleID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"titleID\",\n              value: x.titleID,\n              onChange: e => handleInputChange(e, i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" XDM Title \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"titleXDM\",\n              value: x.titleXDM,\n              onChange: e => handleInputChange(e, i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 24\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" XDM Type \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => handleInputChange(e, i),\n              children: types.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"typeXDM\",\n                value: x.typeXDM,\n                children: item\n              }, item, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \" XDM Description \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: x.descriptionXDM,\n              name: \"descriptionXDM\",\n              onChange: e => handleInputChange(e, i)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Meta Status \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setmetastatus(e.target.value),\n          children: metastatus.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item,\n            children: item\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"container\",\n          onClick: handleAddClick,\n          children: \"Add Properties\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), \" \", \"\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitApi,\n          children: \" Add Object \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitApi,\n          children: \" Submit \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n          span: true,\n          className: \"menu navigation-menu\",\n          href: \"https://github.com/manvithchandra19/test/compare\",\n          children: [\" \", \"Submit to GitHub\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"split right\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        class: \"textArea\",\n        value: jsonOutput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Schema, \"7DHIfSn79DOejrbrphwb/FR8X24=\");\n\n_c = Schema;\nexport default Schema;\n\nvar _c;\n\n$RefreshReg$(_c, \"Schema\");","map":{"version":3,"sources":["C:/Users/manvi/Documents/Project/jsonmodel/src/schema.jsx"],"names":["React","useState","useEffect","Collapse","Navbar","NavbarToggler","NavbarBrand","Nav","NavItem","NavLink","Schema","schemaType","setSchemaType","schemaName","setSchemaName","titlemain","setTitle","titleXdm","setTitleXdm","description","setDescription","descriptionXdm","setDescriptionXdm","behaviour","setBehaviour","className","setClassName","typemain","setType","metaStatus","setmetastatus","jsonOutput","setjsonOutput","inputList","setInputList","titleID","titleXDM","typeXDM","descriptionXDM","schema_Type","behaviours","classname","types","metastatus","labeloption","setlabel","valueoption","setvalue","handleInputChange","e","index","name","value","target","list","console","log","handleAddClick","submitApi","details","type","title","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","pdfData","method","headers","body","fetch","then","response","json","JSON","stringify","undefined","clearText","catch","error","handleOption","handleclass","textAlign","map","item","x","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {} from \"./schema.css\";\r\n//\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\n\r\nconst Schema = () => {\r\n  const [schemaType, setSchemaType] = useState(\"class\");\r\n  const [schemaName, setSchemaName] = useState(\"\");\r\n  const [titlemain, setTitle] = useState(\"\");\r\n  const [titleXdm, setTitleXdm] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [descriptionXdm, setDescriptionXdm] = useState(\"\");\r\n  const [behaviour, setBehaviour] = useState(\"record\");\r\n  const [className, setClassName] = useState(\"profile\");\r\n  const [typemain, setType] = useState(\"string\");\r\n  const [metaStatus, setmetastatus] = useState(\"experimental\");\r\n  const [jsonOutput, setjsonOutput] = useState(\"\");\r\n\r\n  const [inputList, setInputList] = useState([\r\n    { titleID: \"\", titleXDM: \"\", typeXDM: \"\", descriptionXDM: \"\" },\r\n  ]);\r\n\r\n  const schema_Type = [\"class\", \"mixin\", \"datatype\"];\r\n  const behaviours = [\"record\", \"timeseries\"];\r\n  const classname = [\"profile\", \"experience event\", \"product\"];\r\n  const types = [\"string\", \"integer\", \"data-time\", \"date\", \"array\", \"object\"];\r\n  const metastatus = [\"experimental\", \"stable\"];\r\n\r\n  const [labeloption, setlabel] = useState(\"Behaviour\");\r\n  const [valueoption, setvalue] = useState(behaviours);\r\n\r\n  const handleInputChange = (e, index) => {\r\n    const { name, value } = e.target;\r\n    // console.log(e.target.name);\r\n\r\n    const list = [...inputList];\r\n    // console.log(list);\r\n    list[index][name] = value;\r\n    setInputList(list);\r\n    console.log(inputList);\r\n  };\r\n  //\r\n  // constructor(props) {\r\n  //   super(props);\r\n\r\n  //   this.toggle = this.toggle.bind(this);\r\n  //   this.state = {\r\n  //     isOpen: false\r\n  //   }\r\n  // };\r\n  //\r\n  // toggle() {\r\n  //   this.setState({\r\n  //     isOpen: !this.state.isOpen\r\n  //   });\r\n  // }\r\n  //\r\n\r\n  const handleAddClick = () => {\r\n    setInputList([\r\n      ...inputList,\r\n      { titleID: \"\", titleXDM: \"\", typeXDM: \"\", descriptionXDM: \"\" },\r\n    ]);\r\n    console.log(inputList);\r\n  };\r\n\r\n  const submitApi = () => {\r\n    var details = {\r\n      metaStatus: metaStatus,\r\n      descriptionXdm: descriptionXdm,\r\n      type: typemain,\r\n      description: description,\r\n      title: titlemain,\r\n      titleXdm: titleXdm,\r\n      // type:typeXdm,\r\n      behaviour: behaviour,\r\n      className: className,\r\n      schemaName: schemaName,\r\n      schemaType: schemaType,\r\n    };\r\n    var formBody = [];\r\n    for (var property in details) {\r\n      var encodedKey = encodeURIComponent(property);\r\n      var encodedValue = encodeURIComponent(details[property]);\r\n      formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n    const pdfData = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\r\n      },\r\n      body: formBody,\r\n    };\r\n    fetch(\"http://localhost:5000/getData\", pdfData)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setjsonOutput(JSON.stringify(response, undefined, 4));\r\n        console.log(response);\r\n        clearText();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  const clearText = () => {\r\n    setSchemaName(\"\");\r\n    setSchemaType(\"\");\r\n    setDescriptionXdm(\"\");\r\n    setDescription(\"\");\r\n    setTitleXdm(\"\");\r\n    setSchemaType(\"class\");\r\n    setmetastatus(\"\");\r\n    setType(\"\");\r\n    setTitle(\"\");\r\n  };\r\n\r\n  //let labeloption = 'Behaviour', valueoption = behaviours;\r\n  const handleOption = (e) => {\r\n    setSchemaType(e.target.value);\r\n    if (e.target.value === \"class\") {\r\n      setlabel(\"Behaviour\");\r\n      setvalue(behaviours);\r\n    } else if (e.target.value === \"mixin\") {\r\n      setlabel(\"Class Name\");\r\n      setvalue(classname);\r\n    }\r\n  };\r\n\r\n  const handleclass = (e) => {\r\n    if (schemaType === \"class\") {\r\n      setBehaviour(e.target.value);\r\n    } else if (schemaType === \"mixin\") {\r\n      setClassName(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: \"center\" }}>XDM Tool</h2>\r\n\r\n      <div class=\"split left\">\r\n        <div class=\"centered \">\r\n          <label className=\"form\">Schema Type </label>\r\n          <select onChange={handleOption}>\r\n            {schema_Type.map((item) => (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <br />\r\n          <label>{labeloption}</label>\r\n          <select onChange={handleclass}>\r\n            {valueoption.map((item) => (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <br />\r\n          <label>Schema Name</label>\r\n          <input\r\n            type=\"text\"\r\n            value={schemaName}\r\n            onChange={(e) => setSchemaName(e.target.value)}\r\n          />{\" \"}\r\n          <br /> <br />\r\n          <label>Schema Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={titlemain}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />{\" \"}\r\n          <br /> <br />\r\n          <label>Schema Description</label>\r\n          <input\r\n            type=\"text\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />{\" \"}\r\n          <br /> <br />\r\n          {inputList.map((x, i) => {\r\n            return (\r\n              <div>\r\n                <label> XDM TitleID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"titleID\"\r\n                  value={x.titleID}\r\n                  onChange={(e) => handleInputChange(e, i)}\r\n                />{\" \"}\r\n                <br />\r\n                <br />\r\n                <label> XDM Title </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"titleXDM\"\r\n                  value={x.titleXDM}\r\n                  onChange={(e) => handleInputChange(e, i)}\r\n                />{\" \"}\r\n                <br /> <br />\r\n                <label> XDM Type </label>\r\n                <select onChange={(e) => handleInputChange(e, i)}>\r\n                  {types.map((item) => (\r\n                    <option key={item} name=\"typeXDM\" value={x.typeXDM}>\r\n                      {item}\r\n                    </option>\r\n                  ))}\r\n                </select>{\" \"}\r\n                <br />\r\n                <br />\r\n                <label> XDM Description </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={x.descriptionXDM}\r\n                  name=\"descriptionXDM\"\r\n                  onChange={(e) => handleInputChange(e, i)}\r\n                />{\" \"}\r\n                <br /> <br />\r\n              </div>\r\n            );\r\n          })}\r\n          <label>Meta Status </label>\r\n          <select onChange={(e) => setmetastatus(e.target.value)}>\r\n            {metastatus.map((item) => (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <br />\r\n          <button className=\"container\" onClick={handleAddClick}>\r\n            Add Properties\r\n          </button>{\" \"}\r\n          &nbsp;&nbsp;&nbsp;\r\n          <button onClick={submitApi}> Add Object </button>\r\n          <br />\r\n          <br />\r\n          <button onClick={submitApi}> Submit </button>\r\n          <NavLink\r\n            span\r\n            className=\"menu navigation-menu\"\r\n            href=\"https://github.com/manvithchandra19/test/compare\"\r\n          >\r\n            {\" \"}\r\n            Submit to GitHub\r\n          </NavLink>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </div>\r\n      <div class=\"split right\">\r\n        <textarea class=\"textArea\" value={jsonOutput}></textarea>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Schema;\r\n"]},"metadata":{},"sourceType":"module"}