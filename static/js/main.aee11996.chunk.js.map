{"version":3,"sources":["logo.svg","schema.jsx","App.js","reportWebVitals.js","index.js"],"names":["Schema","useState","schemaType","setSchemaType","schemaName","setSchemaName","titlemain","setTitle","titleXdm","setTitleXdm","description","setDescription","descriptionXdm","setDescriptionXdm","behaviour","setBehaviour","className","setClassName","typemain","setType","metaStatus","setmetastatus","jsonOutput","setjsonOutput","titleID","titleXDM","typeXDM","descriptionXDM","inputList","setInputList","behaviours","classname","types","labeloption","setlabel","valueoption","setvalue","handleInputChange","e","index","target","name","value","list","console","log","submitApi","details","type","title","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","then","response","json","JSON","stringify","undefined","clearText","catch","error","style","textAlign","class","onChange","map","item","x","i","onClick","NavLink","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee11996.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport {} from \"./schema.css\";\r\n//\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\n\r\nconst Schema = () => {\r\n  const [schemaType, setSchemaType] = useState(\"class\");\r\n  const [schemaName, setSchemaName] = useState(\"\");\r\n  const [titlemain, setTitle] = useState(\"\");\r\n  const [titleXdm, setTitleXdm] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [descriptionXdm, setDescriptionXdm] = useState(\"\");\r\n  const [behaviour, setBehaviour] = useState(\"record\");\r\n  const [className, setClassName] = useState(\"profile\");\r\n  const [typemain, setType] = useState(\"string\");\r\n  const [metaStatus, setmetastatus] = useState(\"experimental\");\r\n  const [jsonOutput, setjsonOutput] = useState(\"\");\r\n\r\n  const [inputList, setInputList] = useState([\r\n    { titleID: \"\", titleXDM: \"\", typeXDM: \"\", descriptionXDM: \"\" },\r\n  ]);\r\n\r\n  const schema_Type = [\"class\", \"mixin\", \"datatype\"];\r\n  const behaviours = [\"record\", \"timeseries\"];\r\n  const classname = [\"profile\", \"experience event\", \"product\"];\r\n  const types = [\"string\", \"integer\", \"data-time\", \"date\", \"array\", \"object\"];\r\n  const metastatus = [\"experimental\", \"stable\"];\r\n\r\n  const [labeloption, setlabel] = useState(\"Behaviour\");\r\n  const [valueoption, setvalue] = useState(behaviours);\r\n\r\n  const handleInputChange = (e, index) => {\r\n    const { name, value } = e.target;\r\n    // console.log(e.target.name);\r\n\r\n    const list = [...inputList];\r\n    // console.log(list);\r\n    list[index][name] = value;\r\n    setInputList(list);\r\n    console.log(inputList);\r\n  };\r\n  //\r\n  // constructor(props) {\r\n  //   super(props);\r\n\r\n  //   this.toggle = this.toggle.bind(this);\r\n  //   this.state = {\r\n  //     isOpen: false\r\n  //   }\r\n  // };\r\n  //\r\n  // toggle() {\r\n  //   this.setState({\r\n  //     isOpen: !this.state.isOpen\r\n  //   });\r\n  // }\r\n  //\r\n\r\n  const handleAddClick = () => {\r\n    setInputList([\r\n      ...inputList,\r\n      { titleID: \"\", titleXDM: \"\", typeXDM: \"\", descriptionXDM: \"\" },\r\n    ]);\r\n    console.log(inputList);\r\n  };\r\n\r\n  const submitApi = () => {\r\n    var details = {\r\n      metaStatus: metaStatus,\r\n      descriptionXdm: descriptionXdm,\r\n      type: typemain,\r\n      description: description,\r\n      title: titlemain,\r\n      titleXdm: titleXdm,\r\n      // type:typeXdm,\r\n      behaviour: behaviour,\r\n      className: className,\r\n      schemaName: schemaName,\r\n      schemaType: schemaType,\r\n    };\r\n    var formBody = [];\r\n    for (var property in details) {\r\n      var encodedKey = encodeURIComponent(property);\r\n      var encodedValue = encodeURIComponent(details[property]);\r\n      formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n    const pdfData = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\r\n      },\r\n      body: formBody,\r\n    };\r\n    fetch(\"http://localhost:5000/getData\", pdfData)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setjsonOutput(JSON.stringify(response, undefined, 4));\r\n        console.log(response);\r\n        clearText();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  const clearText = () => {\r\n    setSchemaName(\"\");\r\n    setSchemaType(\"\");\r\n    setDescriptionXdm(\"\");\r\n    setDescription(\"\");\r\n    setTitleXdm(\"\");\r\n    setSchemaType(\"class\");\r\n    setmetastatus(\"\");\r\n    setType(\"\");\r\n    setTitle(\"\");\r\n  };\r\n\r\n  //let labeloption = 'Behaviour', valueoption = behaviours;\r\n  const handleOption = (e) => {\r\n    setSchemaType(e.target.value);\r\n    if (e.target.value === \"class\") {\r\n      setlabel(\"Behaviour\");\r\n      setvalue(behaviours);\r\n    } else if (e.target.value === \"mixin\") {\r\n      setlabel(\"Class Name\");\r\n      setvalue(classname);\r\n    }\r\n  };\r\n\r\n  const handleclass = (e) => {\r\n    if (schemaType === \"class\") {\r\n      setBehaviour(e.target.value);\r\n    } else if (schemaType === \"mixin\") {\r\n      setClassName(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: \"center\" }}>XDM Tool</h2>\r\n\r\n      <div class=\"split left\">\r\n        <div class=\"centered \">\r\n          <label className=\"form\">Schema Type </label>\r\n          <select onChange={handleOption}>\r\n            {schema_Type.map((item) => (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <br />\r\n          <label>{labeloption}</label>\r\n          <select onChange={handleclass}>\r\n            {valueoption.map((item) => (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <br />\r\n          <label>Schema Name</label>\r\n          <input\r\n            type=\"text\"\r\n            value={schemaName}\r\n            onChange={(e) => setSchemaName(e.target.value)}\r\n          />{\" \"}\r\n          <br /> <br />\r\n          <label>Schema Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={titlemain}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />{\" \"}\r\n          <br /> <br />\r\n          <label>Schema Description</label>\r\n          <input\r\n            type=\"text\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />{\" \"}\r\n          <br /> <br />\r\n          {inputList.map((x, i) => {\r\n            return (\r\n              <div>\r\n                <label> XDM TitleID</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"titleID\"\r\n                  value={x.titleID}\r\n                  onChange={(e) => handleInputChange(e, i)}\r\n                />{\" \"}\r\n                <br />\r\n                <br />\r\n                <label> XDM Title </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"titleXDM\"\r\n                  value={x.titleXDM}\r\n                  onChange={(e) => handleInputChange(e, i)}\r\n                />{\" \"}\r\n                <br /> <br />\r\n                <label> XDM Type </label>\r\n                <select onChange={(e) => handleInputChange(e, i)}>\r\n                  {types.map((item) => (\r\n                    <option key={item} name=\"typeXDM\" value={x.typeXDM}>\r\n                      {item}\r\n                    </option>\r\n                  ))}\r\n                </select>{\" \"}\r\n                <br />\r\n                <br />\r\n                <label> XDM Description </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={x.descriptionXDM}\r\n                  name=\"descriptionXDM\"\r\n                  onChange={(e) => handleInputChange(e, i)}\r\n                />{\" \"}\r\n                <br /> <br />\r\n              </div>\r\n            );\r\n          })}\r\n          <label>Meta Status </label>\r\n          <select onChange={(e) => setmetastatus(e.target.value)}>\r\n            {metastatus.map((item) => (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>{\" \"}\r\n          <br />\r\n          <br />\r\n          <button className=\"container\" onClick={handleAddClick}>\r\n            Add Properties\r\n          </button>{\" \"}\r\n          &nbsp;&nbsp;&nbsp;\r\n          <button onClick={submitApi}> Add Object </button>\r\n          <br />\r\n          <br />\r\n          <button onClick={submitApi}> Submit </button>\r\n          <NavLink\r\n            href=\"https://github.com/manvithchandra19/test/compare\"\r\n          >\r\n            {\" \"}\r\n            Submit to GitHub\r\n          </NavLink>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </div>\r\n      <div class=\"split right\">\r\n        <textarea class=\"textArea\" value={jsonOutput}></textarea>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Schema;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Schema from './schema'\nfunction App() {\n  return (\n   <Schema/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}